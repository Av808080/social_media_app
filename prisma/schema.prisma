generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  userName              String          @unique
  name                  String?
  serName               String
  description           String?
  coverImg              String
  avatar                String
  website               String?
  work                  String?
  school                String?
  city                  String?
  createAt              DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  blockedBy             Block[]         @relation("BlockesRecieved")
  blockes               Block[]         @relation("BlockesSent")
  posts                 Post[]
  likes                 Like[]
  comments              Comment[]
  followers             Follower[]      @relation("UserFollower")
  followings            Follower[]      @relation("UserFollowing")
  Story                 Story?
  followRequestReciever FollowRequest[] @relation("reqRecieved")
  followRequestsSender  FollowRequest[] @relation("reqSent")
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  description String
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?  @db.ObjectId
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?  @db.ObjectId
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  likes       Like[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String   @db.ObjectId
}

model Block {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  blocker   User   @relation("BlockesSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockedId String @db.ObjectId
  blocked   User   @relation("BlockesRecieved", fields: [blockedId], references: [id],onDelete:Cascade)
  blockerId String @db.ObjectId

  @@unique([blockedId, blockerId])
}

model Follower {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String   @db.ObjectId
  follower    User     @relation("UserFollower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String   @db.ObjectId
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  img       String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [UserId], references: [id], onDelete: Cascade)
  UserId    String   @unique @db.ObjectId
}

model FollowRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  Sender     User     @relation("reqSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String   @db.ObjectId
  Reciever   User     @relation("reqRecieved", fields: [recieverId], references: [id], onDelete: Cascade)
  recieverId String   @db.ObjectId
}
